/* Autogenerated with kurento-module-creator */

#include "OpencvPluginSampleOpenCVImpl.hpp"
#include <KurentoException.hpp>
#include<sys/stat.h>
#include<fcntl.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <signal.h>
#include<semaphore.h>
sem_t *sem_test;
sem_t *sem_test1;
namespace kurento
{
namespace module
{
namespace opencvpluginsample
{

OpencvPluginSampleOpenCVImpl::OpencvPluginSampleOpenCVImpl ()
{
  this->filterType = 0;
  this->edgeValue = 125;
  sem_test = sem_open("ni", O_CREAT, 0644, 0);
    if(sem_test < 0)
    {
        //printf("fail\n");
        exit(-1);
    }
// sem_test1 = sem_open("ne",0);
 sem_test1 = sem_open("ne",O_CREAT,0644,0);
    if(sem_test1 < 0)
    {
        //printf("ff\n");
         exit(-1);
    }
}

/*
 * This function will be called with each new frame. mat variable
 * contains the current frame. You should insert your image processing code
 * here. Any changes in mat, will be sent through the Media Pipeline.
 */
void OpencvPluginSampleOpenCVImpl::process (cv::Mat &mat)
{
 
 // FIXME: Implement this
   sem_post(sem_test1);
 sem_wait(sem_test);
  imwrite("/home/zhoug/myzhou.png",mat);
   sem_post(sem_test1);
  cv::Mat matBN (mat.rows, mat.cols, CV_8UC1);
  cv::cvtColor(mat, matBN, CV_BGRA2GRAY);

  if (filterType == 0) {
    //Canny (matBN, matBN, edgeValue, 125);
  }
  cvtColor (matBN, mat, CV_GRAY2BGRA);
}
void OpencvPluginSampleOpenCVImpl::setFilterType (int filterType)
{
  this->filterType = filterType;
}

void OpencvPluginSampleOpenCVImpl::setEdgeThreshold (int edgeValue)
{
  this->edgeValue = edgeValue;
}


} /* opencvpluginsample */
} /* module */
} /* kurento */
